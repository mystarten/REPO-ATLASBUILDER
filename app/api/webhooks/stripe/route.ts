import { NextResponse } from 'next/server';
import { headers } from 'next/headers';
import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-11-20.acacia',
});

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export const dynamic = 'force-dynamic';
export const runtime = 'nodejs';

function getPlanFromPriceId(priceId: string): { plan: string; limit: number } {
  const prices = {
    starter: process.env.NEXT_PUBLIC_STRIPE_PRICE_STARTER,
    pro: process.env.NEXT_PUBLIC_STRIPE_PRICE_PRO,
    enterprise: process.env.NEXT_PUBLIC_STRIPE_PRICE_ENTERPRISE,
  };

  console.log('üîç Price ID re√ßu:', priceId);
  console.log('üìã Prix configur√©s:', prices);

  if (priceId === prices.starter) return { plan: 'starter', limit: 20 };
  if (priceId === prices.pro) return { plan: 'pro', limit: 40 };
  if (priceId === prices.enterprise) return { plan: 'enterprise', limit: 999999 };
  
  console.warn('‚ö†Ô∏è Price ID non reconnu');
  return { plan: 'free', limit: 3 };
}

export async function POST(req: Request) {
  console.log('üîµ === WEBHOOK STRIPE RE√áU ===');
  
  try {
    const body = await req.text();
    const headersList = await headers();
    const signature = headersList.get('stripe-signature');

    if (!signature) {
      console.error('‚ùå Pas de signature Stripe');
      return NextResponse.json({ error: 'No signature' }, { status: 400 });
    }

    let event: Stripe.Event;
    try {
      event = stripe.webhooks.constructEvent(
        body,
        signature,
        process.env.STRIPE_WEBHOOK_SECRET!
      );
      console.log('‚úÖ Event Stripe v√©rifi√©:', event.type);
    } catch (err: any) {
      console.error('‚ùå Erreur v√©rification signature:', err.message);
      return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });
    }

    switch (event.type) {
      case 'checkout.session.completed': {
        const session = event.data.object as Stripe.Checkout.Session;
        
        console.log('üí≥ === CHECKOUT COMPLETED ===');
        console.log('üìß Email:', session.customer_email);
        console.log('üÜî Client reference ID:', session.client_reference_id);
        console.log('üÜî Metadata user_id:', session.metadata?.user_id);

        // AM√âLIORATION 1 : Trouver l'utilisateur de plusieurs fa√ßons
        let userId = session.client_reference_id || session.metadata?.user_id;
        
        // Si pas d'user_id, chercher par email dans Supabase
        if (!userId && session.customer_email) {
          console.log('‚ö†Ô∏è Pas d\'user_id trouv√©, recherche par email...');
          
          const { data: profile, error: profileError } = await supabaseAdmin
            .from('profiles')
            .select('id')
            .eq('email', session.customer_email)
            .single();
          
          if (profile && !profileError) {
            userId = profile.id;
            console.log('‚úÖ User trouv√© par email:', userId);
          } else {
            console.error('‚ùå User non trouv√© par email:', profileError);
            return NextResponse.json({ error: 'User not found' }, { status: 400 });
          }
        }

        if (!userId) {
          console.error('‚ùå Impossible de trouver l\'utilisateur');
          return NextResponse.json({ error: 'No user identification' }, { status: 400 });
        }

        const subscriptionId = session.subscription as string;
        if (!subscriptionId) {
          console.error('‚ùå Subscription ID manquant');
          return NextResponse.json({ error: 'No subscription ID' }, { status: 400 });
        }

        // R√©cup√©rer les d√©tails de l'abonnement depuis Stripe
        const subscription = await stripe.subscriptions.retrieve(subscriptionId);
        const priceId = subscription.items.data[0].price.id;
        const customerId = subscription.customer as string;
        const { plan, limit } = getPlanFromPriceId(priceId);

        console.log(`üéØ Plan identifi√©: ${plan}`);
        console.log(`üìä Limite: ${limit} templates`);

        // AM√âLIORATION 2 : Update profile avec plus de d√©tails
        const { data: updatedProfile, error: profileError } = await supabaseAdmin
          .from('profiles')
          .update({
            subscription_tier: plan,
            templates_limit: limit,
            stripe_customer_id: customerId,
            updated_at: new Date().toISOString(),
          })
          .eq('id', userId)
          .select();

        if (profileError) {
          console.error('‚ùå Erreur update profile:', profileError);
          return NextResponse.json({ error: 'Failed to update profile' }, { status: 500 });
        } else {
          console.log('‚úÖ Profile mis √† jour:', updatedProfile);
        }

        // AM√âLIORATION 3 : Create/update subscription
        const { data: createdSub, error: subError } = await supabaseAdmin
          .from('subscriptions')
          .upsert({
            id: subscriptionId,
            user_id: userId,
            stripe_customer_id: customerId,
            status: subscription.status,
            price_id: priceId,
            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          })
          .select();

        if (subError) {
          console.error('‚ùå Erreur subscription:', subError);
        } else {
          console.log('‚úÖ Subscription cr√©√©e/mise √† jour:', createdSub);
        }

        console.log('üéâ === CHECKOUT TRAIT√â AVEC SUCC√àS ===');
        break;
      }

      // AM√âLIORATION 4 : G√©rer les mises √† jour d'abonnement (renouvellements, changements de plan)
      case 'customer.subscription.updated': {
        const subscription = event.data.object as Stripe.Subscription;
        
        console.log('üîÑ === SUBSCRIPTION UPDATED ===');
        console.log('üÜî Subscription ID:', subscription.id);
        console.log('üìä Statut:', subscription.status);

        const priceId = subscription.items.data[0].price.id;
        const { plan, limit } = getPlanFromPriceId(priceId);

        // Trouver l'utilisateur via stripe_customer_id
        const { data: profile, error: findError } = await supabaseAdmin
          .from('profiles')
          .select('id, email')
          .eq('stripe_customer_id', subscription.customer)
          .single();

        if (!profile || findError) {
          console.error('‚ùå Profil non trouv√© pour customer:', subscription.customer);
          return NextResponse.json({ error: 'Profile not found' }, { status: 400 });
        }

        console.log('‚úÖ User trouv√©:', profile.email);

        // Mettre √† jour le profil (passer √† "free" si annul√©)
        const newPlan = subscription.status === 'active' ? plan : 'free';
        const newLimit = subscription.status === 'active' ? limit : 3;

        const { error: updateError } = await supabaseAdmin
          .from('profiles')
          .update({
            subscription_tier: newPlan,
            templates_limit: newLimit,
            updated_at: new Date().toISOString(),
          })
          .eq('id', profile.id);

        if (updateError) {
          console.error('‚ùå Erreur update profile:', updateError);
        } else {
          console.log(`‚úÖ Profile mis √† jour: ${newPlan} (${newLimit} templates)`);
        }

        // Mettre √† jour la subscription
        const { error: subUpdateError } = await supabaseAdmin
          .from('subscriptions')
          .update({
            status: subscription.status,
            price_id: priceId,
            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),
            updated_at: new Date().toISOString(),
          })
          .eq('id', subscription.id);

        if (subUpdateError) {
          console.error('‚ùå Erreur update subscription:', subUpdateError);
        } else {
          console.log('‚úÖ Subscription mise √† jour');
        }

        console.log('üéâ === SUBSCRIPTION UPDATE TRAIT√âE ===');
        break;
      }

      case 'customer.subscription.deleted': {
        const subscription = event.data.object as Stripe.Subscription;
        
        console.log('üóëÔ∏è === SUBSCRIPTION DELETED ===');

        // Trouver l'utilisateur
        const { data: profile, error: findError } = await supabaseAdmin
          .from('profiles')
          .select('id')
          .eq('stripe_customer_id', subscription.customer)
          .single();

        if (profile && !findError) {
          // Remettre en plan gratuit
          await supabaseAdmin
            .from('profiles')
            .update({
              subscription_tier: 'free',
              templates_limit: 3,
              updated_at: new Date().toISOString(),
            })
            .eq('id', profile.id);

          console.log('‚úÖ User remis en plan gratuit');
        }

        break;
      }

      case 'invoice.payment_succeeded':
      case 'invoice.payment_failed':
        console.log(`üì® Event ${event.type} re√ßu`);
        break;

      default:
        console.log(`‚ö†Ô∏è Event non g√©r√©: ${event.type}`);
    }

    return NextResponse.json({ received: true }, { status: 200 });
  } catch (error: any) {
    console.error('‚ùå === ERREUR GLOBALE WEBHOOK ===');
    console.error(error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
